Compiled from "CakeSkillTrees.scala"
public class rpg.cake.DexNodes$DexSkill$ extends scala.runtime.AbstractFunction1<java.lang.String, rpg.cake.DexNodes$DexSkill> implements scala.Serializable {
  private final rpg.cake.Nodes $outer;

  public final java.lang.String toString();
    Code:
       0: ldc           #19                 // String DexSkill
       2: areturn

  public rpg.cake.DexNodes$DexSkill apply(java.lang.String);
    Code:
       0: new           #10                 // class rpg/cake/DexNodes$DexSkill
       3: dup
       4: aload_0
       5: getfield      #26                 // Field $outer:Lrpg/cake/Nodes;
       8: aload_1
       9: invokespecial #30                 // Method rpg/cake/DexNodes$DexSkill."<init>":(Lrpg/cake/Nodes;Ljava/lang/String;)V
      12: areturn

  public scala.Option<java.lang.String> unapply(rpg.cake.DexNodes$DexSkill);
    Code:
       0: aload_1
       1: ifnonnull     10
       4: getstatic     #40                 // Field scala/None$.MODULE$:Lscala/None$;
       7: goto          21
      10: new           #42                 // class scala/Some
      13: dup
      14: aload_1
      15: invokevirtual #44                 // Method rpg/cake/DexNodes$DexSkill.name:()Ljava/lang/String;
      18: invokespecial #47                 // Method scala/Some."<init>":(Ljava/lang/Object;)V
      21: areturn

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #54                 // class java/lang/String
       5: invokevirtual #56                 // Method apply:(Ljava/lang/String;)Lrpg/cake/DexNodes$DexSkill;
       8: areturn

  public rpg.cake.DexNodes$DexSkill$(rpg.cake.Nodes);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: athrow
       6: aload_0
       7: aload_1
       8: putfield      #26                 // Field $outer:Lrpg/cake/Nodes;
      11: aload_0
      12: invokespecial #61                 // Method scala/runtime/AbstractFunction1."<init>":()V
      15: return
}
